#include "Map1.h"

#include "../GameLogic/PhysicManager.h"
#include "../TileMapBase.h"
#include "../Hitbox.h"
#include "../player/Samurai.h"

#include "../../GameManagers/ResourceManager.h"
#include "../../GameManagers/WindowManager.h"
#include "../../GameManagers/GameManager.h"

Map1::Map1()
{
	m_physicControll = nullptr; 
}

Map1::~Map1()
{
	if (m_background != nullptr)
	{
		delete m_background;
		m_background = nullptr;
	}

	if (m_character != nullptr)
	{
		delete m_character;
		m_character = nullptr;
	}

	if (m_decorMap != nullptr)
	{
		delete m_decorMap;
		m_decorMap = nullptr;
	}

	if (m_map != nullptr)
	{
		delete m_map;
		m_map = nullptr;
	}

	for (Hitbox* hitbox : m_mapHitbox)
	{
		if (hitbox != nullptr)
		{
			delete hitbox;
			hitbox = nullptr;
		}
	}
	m_mapHitbox.clear();

	if (m_physicControll != nullptr)
	{
		delete m_physicControll;
		m_physicControll = nullptr;
	}
}

void Map1::init()
{
	// decorMap
	{
		m_decorMatrix = {
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,2,-1,-1,7,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,7,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,2,-1,7,-1,-1,-1,-1,2,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,36,37,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,36,37,37,37,37,37,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,7,2,6,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,-1,53,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,37,37,38,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,37,37,37,37,37,37,37,37,37,37,38,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,52,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,53,53,53,53,53,53,54,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,36,37,38,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,53,53,53,53,53,53,54,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,52,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,52,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,52,53,53,52,53,54,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,37,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,52,53,53,53,53,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,2,-1,7,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,7,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,54,52,54,-1,-1,-1,-1,-1,-1,2,7,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,52,54,-1,-1,-1,2,7,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,37,37,37,37,37,37,37,37,38,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,2,-1,-1,52,53,53,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,54,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			0,4,0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,53,53,53,53,53,53,54,-1,-1,-1,-1,-1,-1,-1,-1,52,53,53,54,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
		};
		m_decorMap = new TileMapBase();
		m_decorMap->loadBase(DATA->getTexture("tileMap1"), { 32, 32 }, m_decorMatrix, 50, 40);
		m_decorMap->setOrigin({ 0 , 0 });
		m_decorMap->setPosition({ 0 , 0 });
	}

	// map
	{
		m_mapMatrix = {
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,16,17,17,17,17,17,17,17,17,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,48,49,49,49,33,33,33,33,33,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,32,33,33,33,33,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,48,49,49,49,49,49,49,49,50,-1,-1,16,17,17,17,17,17,17,18,-1,-1,-1,16,17,17,17,17,17,18,-1,-1,-1,-1,16,18,-1,16,17,17,17,17,17,17,17,18,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,49,49,49,49,49,49,50,-1,-1,-1,48,49,49,49,49,49,50,-1,-1,-1,1,48,50,-1,32,33,33,33,33,33,33,33,34,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,49,49,33,33,33,49,49,50,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,18,-1,-1,-1,-1,-1,-1,-1,-1,32,33,33,33,34,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,49,50,-1,-1,-1,-1,-1,-1,-1,-1,48,49,49,49,50,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,16,17,17,17,17,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,32,33,33,33,33,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,48,49,49,49,49,49,49,49,50,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			17,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,33,49,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,18,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,34,-1,-1,-1,-1,-1,16,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,33,33,33,34,-1,-1,-1,16,17,17,17,17,17,17,17,18,-1,-1,-1,-1,-1,
			33,34,-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,33,33,33,34,-1,-1,-1,32,33,33,33,33,33,33,33,33,17,17,18,-1,-1,
			17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,33,33,33,34,-1,-1,-1,48,49,49,49,49,49,49,49,49,49,49,50,-1,-1,
			33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,33,33,33,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,33,33,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,-1,20,21,22,-1,-1,-1,-1,48,49,50,49,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,32,33,33,17,21,17,21,17,21,17,21,17,21,17,21,17,21,17,21,17,
			49,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,
			21,21,21,21,21,21,21,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,16,17,18,
			-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,16,17,17,17,17,17,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,
			-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,32,33,33,33,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,
			21,22,-1,-1,-1,48,49,50,-1,-1,-1,-1,-1,-1,-1,48,49,49,49,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,-1,-1,17,18,32,33,34,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,18,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,35,-1,-1,-1,33,34,32,33,34,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,32,33,34,-1,-1,-1,-1,-1,-1,-1,-1,35,-1,-1,19,33,34,32,33,34,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,17,33,33,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,34,32,33,34,-1,-1,-1,-1,-1,19,-1,-1,35,-1,-1,35,33,34,32,33,34,
			17,17,17,17,17,17,17,17,17,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
		};
		m_map = new TileMapBase();
		m_map->loadBase(DATA->getTexture("tileMap1"), { 32, 32 }, m_mapMatrix, 50, 40);
		m_map->setOrigin({ 0 , 0 });
		m_map->setPosition({ 0 , 0 });
	}

	// collider Map
	{
		std::list<sf::Vector2i> MapCollider = m_map->getMapCollider({ 32, 32 }, m_mapMatrix, 50, 40);
		for (sf::Vector2i box : MapCollider)
		{
			Hitbox* tmpHitbox = new Hitbox({ 32, 32 });
			tmpHitbox->setPosition(sf::Vector2f(box.x + 16, box.y + 16));
			tmpHitbox->setTag(TAG::MAP);
			m_mapHitbox.push_back(tmpHitbox);
		}
	}
	// character
	{
		m_character = new Samurai({ 500.f, 300.f });
		Hitbox* playerHitbox = new Hitbox(m_character->getSize());
		playerHitbox->setPosition(m_character->getPosition());
		playerHitbox->setTag(TAG::PLAYER);
		m_character->setHitbox(playerHitbox);
	}
}

void Map1::update(float deltaTime)
{
	m_character->update(deltaTime);
}

void Map1::render(sf::RenderWindow& window)
{
	window.setView(getView());
	window.draw(*m_decorMap);
	window.draw(*m_map);
	for (Hitbox* hitbox : m_mapHitbox) 
	{
		hitbox->setFillColor(sf::Color(0, 0, 0, 100));
		window.draw(*hitbox);
	}
	m_character->getHitbox()->setFillColor(sf::Color(0, 0, 0, 100));
	m_character->render(window);
	
}

void Map1::handleEvent(sf::Event& event)
{
	m_character->handleEvent(event);
}

sf::View Map1::getView()
{
	sf::View view;
	view.setSize(800, 600);
	view.setCenter(m_character->getPosition());
	return view;
}
